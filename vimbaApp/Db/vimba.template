# Database for the records specific to the ADVimba driver
# Macros:
#% macro, P, Device Prefix
#% macro, R, Device Suffix
#% macro, PORT, Asyn Port name
#% macro, TIMEOUT, Timeout, default 1
#% macro, ADDR, Asyn Port address, default 0

include "ADGenICam.template"

record(bo, "$(P)$(R)TimeStampMode")
{
   field(PINI, "YES")
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn($(PORT) 0)VMB_TIME_STAMP_MODE")
   field(ZNAM, "Camera")
   field(ONAM, "EPICS")
}

record(bi, "$(P)$(R)TimeStampMode_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn($(PORT) 0)VMB_TIME_STAMP_MODE")
   field(ZNAM, "Camera")
   field(ONAM, "EPICS")
   field(SCAN, "I/O Intr")
}

record(bo, "$(P)$(R)UniqueIdMode")
{
   field(PINI, "YES")
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn($(PORT) 0)VMB_UNIQUE_ID_MODE")
   field(ZNAM, "Camera")
   field(ONAM, "Driver")
}

record(bi, "$(P)$(R)UniqueIdMode_RBV")
{
   field(DTYP, "asynInt32")
   field(INP,  "@asyn($(PORT) 0)VMB_UNIQUE_ID_MODE")
   field(ZNAM, "Camera")
   field(ONAM, "Driver")
   field(SCAN, "I/O Intr")
}

record(bi, "$(P)$(R)PackedPixelFormat_RBV")
{
    field(DTYP, "asynInt32")
    field(INP,  "@asyn($(PORT) 0)VMB_PACKED_PIXEL_FORMAT")
    field(ZNAM, "NO")
    field(ONAM, "YES")
    field(SCAN, "I/O Intr")
}

## Convert pixel format
record(mbbo, "$(P)$(R)ConvertPixelFormat") {
  field(PINI, "YES")
  field(DTYP, "asynInt32")
  field(ZRVL, "0")
  field(ZRST, "None")
  field(ONVL, "1")
  field(ONST, "Mono8")
  field(TWVL, "2")
  field(TWST, "Mono16")
  field(THVL, "3")
  field(THST, "RGB8")
  field(FRVL, "4")
  field(FRST, "RGB16")
  field(OUT,  "@asyn($(PORT) 0)VMB_CONVERT_PIXEL_FORMAT")
}

record(mbbi, "$(P)$(R)ConvertPixelFormat_RBV") {
  field(SCAN, "I/O Intr")
  field(DTYP, "asynInt32")
  field(ZRVL, "0")
  field(ZRST, "None")
  field(ONVL, "1")
  field(ONST, "Mono8")
  field(TWVL, "2")
  field(TWST, "Mono16")
  field(THVL, "3")
  field(THST, "RGB8")
  field(FRVL, "4")
  field(FRST, "RGB16")
  field(INP,  "@asyn($(PORT) 0)VMB_CONVERT_PIXEL_FORMAT")
}

# GigE statistics
record(longin, "$(P)$(R)GC_StatFrameDelivered_RBV") {
  field(DTYP, "asynInt64")
  field(INP,  "@asyn($(PORT),$(ADDR=0),$(TIMEOUT=1))GC_I_StatFrameDelivered")
  field(SCAN, "I/O Intr")
  field(DISA, "0")
  info(autosaveFields, "DESC LOLO LOW HIGH HIHI LLSV LSV HSV HHSV EGU TSE")
}

record(longin, "$(P)$(R)GC_StatFrameDropped_RBV") {
  field(DTYP, "asynInt64")
  field(INP,  "@asyn($(PORT),$(ADDR=0),$(TIMEOUT=1))GC_I_StatFrameDropped")
  field(SCAN, "I/O Intr")
  field(DISA, "0")
  info(autosaveFields, "DESC LOLO LOW HIGH HIHI LLSV LSV HSV HHSV EGU TSE")
}

record(longin, "$(P)$(R)GC_StatFrameUnderrun_RBV") {
  field(DTYP, "asynInt64")
  field(INP,  "@asyn($(PORT),$(ADDR=0),$(TIMEOUT=1))GC_I_StatFrameUnderrun")
  field(SCAN, "I/O Intr")
  field(DISA, "0")
  info(autosaveFields, "DESC LOLO LOW HIGH HIHI LLSV LSV HSV HHSV EGU TSE")
}

record(longin, "$(P)$(R)GC_StatPacketErrors_RBV") {
  field(DTYP, "asynInt64")
  field(INP,  "@asyn($(PORT),$(ADDR=0),$(TIMEOUT=1))GC_I_StatPacketErrors")
  field(SCAN, "I/O Intr")
  field(DISA, "0")
  info(autosaveFields, "DESC LOLO LOW HIGH HIHI LLSV LSV HSV HHSV EGU TSE")
}

record(longin, "$(P)$(R)GC_StatPacketMissed_RBV") {
  field(DTYP, "asynInt64")
  field(INP,  "@asyn($(PORT),$(ADDR=0),$(TIMEOUT=1))GC_I_StatPacketMissed")
  field(SCAN, "I/O Intr")
  field(DISA, "0")
  info(autosaveFields, "DESC LOLO LOW HIGH HIHI LLSV LSV HSV HHSV EGU TSE")
}

record(longin, "$(P)$(R)GC_StatPacketReceived_RBV") {
  field(DTYP, "asynInt64")
  field(INP,  "@asyn($(PORT),$(ADDR=0),$(TIMEOUT=1))GC_I_StatPacketReceived")
  field(SCAN, "I/O Intr")
  field(DISA, "0")
  info(autosaveFields, "DESC LOLO LOW HIGH HIHI LLSV LSV HSV HHSV EGU TSE")
}

record(longin, "$(P)$(R)GC_StatPacketRequested_RBV") {
  field(DTYP, "asynInt64")
  field(INP,  "@asyn($(PORT),$(ADDR=0),$(TIMEOUT=1))GC_I_StatPacketRequested")
  field(SCAN, "I/O Intr")
  field(DISA, "0")
  info(autosaveFields, "DESC LOLO LOW HIGH HIHI LLSV LSV HSV HHSV EGU TSE")
}

record(longin, "$(P)$(R)GC_StatPacketResent_RBV") {
  field(DTYP, "asynInt64")
  field(INP,  "@asyn($(PORT),$(ADDR=0),$(TIMEOUT=1))GC_I_StatPacketResent")
  field(SCAN, "I/O Intr")
  field(DISA, "0")
  info(autosaveFields, "DESC LOLO LOW HIGH HIHI LLSV LSV HSV HHSV EGU TSE")
}

record(mbbi, "$(P)$(R)GC_StreamType_RBV") {
  field(DTYP, "asynInt32")
  field(INP,  "@asyn($(PORT),$(ADDR=0),$(TIMEOUT=1))GC_E_StreamType")
  field(SCAN, "I/O Intr")
  field(DISA, "0")
  info(autosaveFields, "DESC ZRSV ONSV TWSV THSV FRSV FVSV SXSV SVSV EISV NISV TESV ELSV TVSV TTSV FTSV FFSV TSE")
}

# MCB - These are totally bogus and copied from the aravisGige.
# TBD - Fix this!!
record( calc, "$(P)$(R)XmitScale" )
{
    field( INPA, "$(P)$(R)PackedPixelFormat_RBV CPP MS" )
    field( INPB, "$(P)$(R)BitsPerPixel_RBV CPP MS" )
    field( CALC, "A=0?1:B/16" )
    field( PREC, "3" )
}

record( ao, "$(P)$(R)ProcDelayPerPixel" )
{
    field( DOL,  "1.27e-10" )
    field( EGU,  "Sec/px" )
    field( PREC, "12" )
    field( PINI, "YES" )
    info( autosaveFields, "VAL" )
}

record( calc, "$(P)$(R)CamProcDelay" )
{
    field( INPA, "$(P)$(R)PackedPixelFormat_RBV CPP MS" )
    field( INPB, "$(P)$(R)ProcDelayPerPixel CPP MS" )
    field( INPC, "$(P)$(R)ArraySizeX_RBV CPP MS" )
    field( INPD, "$(P)$(R)ArraySizeY_RBV CPP MS" )
    field( CALC, "A=0?0:B*C*D" )
    field( EGU,  "Sec" )
    field( PREC, "5" )
}   

# vimba DataType Enumerations
# Int8=0, UInt8=1, Int16=2, UInt16=3
record( calc, "$(P)$(R)XmitDelay" )
{
    field( INPA, "$(P)$(R)ArraySize_RBV CP MS" )
    field( INPB, "$(P)$(R)GC_DevLinThrLimit_RBV CPP MS" )
    field( INPC, "$(P)$(R)CamProcDelay CPP MS" )
    field( INPD, "$(P)$(R)XmitScale CPP MS" )
    field( CALC, "D*A/B+C" )
    field( EGU,  "Sec" )
    field( PREC, "4" )
}   

record( ao, "$(P)$(R)DriverProcDelay" )
{
    field( DOL,  "2.15e-3" )
    field( EGU,  "Sec" )
    field( PREC, "3" ) 
    field( PINI, "YES" )
    info( autosaveFields, "VAL" )
}   

#
# TrigToTS_Calc: Calculates expected delay from trigger to timeStamp update 
# Inputs: All units in seconds
#   A   - Camera acquire time (exposure length)
#   B   - Camera image transmission time
#   C   - Estimated driver processing delay before requesting timestamp
record( calc, "$(P)$(R)TrigToTS_Calc" )
{
    field( INPA, "$(P)$(R)AcquireTime_RBV CP MS" )
    field( INPB, "$(P)$(R)XmitDelay CP MS" )
    field( INPC, "$(P)$(R)DriverProcDelay CP MS" )
    field( CALC, "A+B+C" )
    field( EGU,  "sec" )
    field( PREC, "5" ) 
}

#
# Try to make initial setup easier with one Big Red Button(tm).
#
record(seq, "$(P)$(R)InitTrigSettings") {
    field(SELM, "All")
    field(DOL0, "0")
    field(LNK0, "$(P)$(R)Acquire PP")
    field(DLY1, "3")
    field(DOL1, "0")
    field(LNK1, "$(P)$(R)FrameRateEnable PP")
    field(DLY2, "2")
    field(DOL2, "1")
    field(LNK2, "$(P)$(R)WriteTrigSelect1.PROC")
    field(DOL3, "1")
    field(LNK3, "$(P)$(R)WriteTrigSelect2.PROC")
    field(DOL4, "0")
    field(LNK4, "$(P)$(R)GC_LineSelector PP")
    field(DLY5, "1")
    field(DOL5, "0")
    field(LNK5, "$(P)$(R)GC_LineMode PP")
    field(DOL6, "1")
    field(LNK6, "$(P)$(R)TriggerSource PP")
    field(DOL7, "2")
    field(LNK7, "$(P)$(R)ImageMode PP")
    field(DOL8, "1")
    field(LNK8, "$(P)$(R)TriggerMode PP")
    field(DOL9, "0.0")
    field(LNK9, "$(P)$(R)CamTrigDelay PP")
    field(DOLA, "1")
    field(LNKA, "$(P)$(R)GC_DevLinThrLimit.PROC PP")
    field(DOLB, "1")
    field(LNKB, "$(P)$(R)GC_DevLinThrLimMode.PROC PP")
}

#
# Sigh... FrameStart isn't a constant value, so let's
# write it as an enum value.  Worse, sometimes it is
# Frame Start with a space!
#
record(stringout, "$(P)$(R)WriteTrigSelect1") {
    field(VAL,  "FrameStart")
    field(OUT, "$(P)$(R)GC_TriggerSelector PP")		  
}

record(stringout, "$(P)$(R)WriteTrigSelect2") {
    field(VAL,  "Frame Start")
    field(OUT, "$(P)$(R)GC_TriggerSelector PP")		  
}

record(seq, "$(P)$(R)InitFreeRunSettings") {
    field(SELM, "All")
    field(DOL0, "0")
    field(LNK0, "$(P)$(R)Acquire PP")
    field(DLY1, "3")
    field(DOL1, "1")
    field(LNK1, "$(P)$(R)FrameRateEnable PP")
    field(DLY2, "2")
    field(DOL2, "0")
    field(LNK2, "$(P)$(R)TriggerSource PP")
    field(DOL3, "2")
    field(LNK3, "$(P)$(R)ImageMode PP")
    field(DOL4, "0")
    field(LNK4, "$(P)$(R)TriggerMode PP")
    field(DOL5, "0.1")
    field(LNK5, "$(P)$(R)AcquirePeriod PP")
    field(DOL6, "0.0")
    field(LNK6, "$(P)$(R)CamTrigDelay PP")
    field(DOL7, "1")
    field(LNK7, "$(P)$(R)GC_DevLinThrLimit.PROC PP")
    field(DOL8, "1")
    field(LNK8, "$(P)$(R)GC_DevLinThrLimMode.PROC PP")
}

#
# During inital IOC startup the autosave restored values from the
# GC_DevLinThrLim* PVs often don't take. This is helper sequence
# that can be triggered later in IOC boot process when the values
# will actually take...
#
record(seq, "$(P)$(R)InitDeviceLinkSettings") {
    field(SELM, "All")
    field(DOL0, "1")
    field(LNK0, "$(P)$(R)GC_DevLinThrLimit.PROC PP")
    field(DLY1, "1")
    field(DOL1, "1")
    field(LNK1, "$(P)$(R)GC_DevLinThrLimMode.PROC PP")
}

#
# Handle changes to PixelFormat.  We need to change two things whenever
# this changes: ConvertPixelFormat and DataType.  We're dependent here
# on the layout of ConvertPixelFormat and DataType as well as the values
# in VmbCommonTypes.h.  (These records need to look at the RVAL, as the
# VAL could change depending on how many options are supported by the
# particular camera.
#
# We're only adjusting things for the Mono settings.  Color will have to
# be manually adjusted, or we'll have to add more records later.
#
record(calcout, "$(P)$(R)AdjustCPF") {
    field(INPA, "$(P)$(R)PixelFormat.RVAL CPP NMS")
    field(CALC, "(A&0x01000000)?1:0")
    field(OOPT, "When Non-zero")
    field(DOPT, "Use OCAL")
    field(OCAL, "(A==0x01080001)?0:2")  # Mono8 == No conversion, any other Mono == Mono16.
    field(OUT,  "$(P)$(R)ConvertPixelFormat PP")
}

record(calcout, "$(P)$(R)AdjustDT") {
    field(INPA, "$(P)$(R)PixelFormat.RVAL CPP NMS")
    field(CALC, "(A&0x01000000)?1:0")
    field(OOPT, "When Non-zero")
    field(DOPT, "Use OCAL")
    field(OCAL, "(A==0x01080001)?1:3")  # Mono8 == Uint8 any other Mono == Uint16.
    field(OUT,  "$(P)$(R)DataType PP")
}
